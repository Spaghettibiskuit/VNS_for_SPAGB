        # bilateral_reward_gain = 0
        # print(arriving_student.fav_partners)
        # for student in arrival_group.students:
        #     print(student.name, student.student_id)
        #     print(student.fav_partners)
        #     if (
        #         student.student_id in arriving_student.fav_partners
        #         and arriving_student.student_id in student.fav_partners
        #     ):
        #         print("It's a match!")
        #         bilateral_reward_gain += self.reward_bilateral
        # print("bilateral reward gain:", bilateral_reward_gain)

        # sum_preferences = 0
        # for project in self.projects:
        #     print("These are the preference values for", project.name)
        #     for project_group in project.groups:
        #         for student in project_group.students:
        #             sum_preferences += student.projects_prefs[
        #                 project.project_id
        #             ]
        #             print(
        #                 f"For {student.name} {student.student_id}: {student.projects_prefs[project.project_id]}"
        #             )
        # print("The sum for all projects:", sum_preferences)
        # return sum_preferences

        # sum_join_rewards = 0
        # print("The join reward is:", self.reward_bilateral)
        # for project in self.projects:
        #     print(f"The the matches per group for {project.name}:")
        #     for project_group in project.groups:
        #         sum_join_rewards += (
        #             self.reward_bilateral * project_group.num_bilateral_pairs
        #         )
        #         print(project_group.bilateral_preferences)
        #         print(project_group.num_bilateral_pairs)
        # print("The sum of join rewards is:", sum_join_rewards)
        # return sum_join_rewards

        # print(
        #     len(self.unassigned),
        #     "students were not assigned. The penalty is:",
        #     self.penalty_non_assignment,
        # )

        # sum_penalties = 0
        # for project in self.projects:
        #     sum_penalties_before = sum_penalties
        #     sum_penalties += (
        #         max(0, project.num_groups - project.offered_num_groups)
        #         * project.pen_groups
        #     )
        #     print(
        #         f"The penalty per surplus group for {project.name} is {project.pen_groups}."
        #         f"\nThe collected penalty is {sum_penalties - sum_penalties_before}"
        #     )
        # print(
        #     "The total sum of group number surplus penalties is:",
        #     sum_penalties,
        # )
        # return sum_penalties

        # sum_penalties = 0
        # for project in self.projects:
        #     sum_penalties_before = sum_penalties
        #     for project_group in project.groups:
        #         sum_penalties += (
        #             abs(project_group.size - project.ideal_group_size)
        #             * project.pen_size
        #         )
        #     print(
        #         f"The group size penalty for {project.name} was {project.pen_size}."
        #         f"\nThe collected penalty is {sum_penalties - sum_penalties_before}"
        #     )
        # print("The total sum of group size penalties is:", sum_penalties)
        # return sum_penalties

        # print(
        #     "Unassigned student chosen:",
        #     student_to_move.name,
        #     student_to_move.student_id,
        # )

        # print(
        #     f"{chosen_project.name} {chosen_project.groups.index(chosen_group)}"
        #     f"{student_to_move.name} {student_to_move.student_id}"
        # )

        # print(f"Departure {departure_deltas} Arrival {arrival_deltas}.")

        
        # for key, value in projects_waitlists.items():
        #     print("\nProject ID:", key)
        #     for student in value:
        #         print(
        #             student.name,
        #             student.student_id,
        #             student.projects_prefs[key],
        #         )

        # return projects_waitlists

        #     min_pref_val, max_pref_val = self._min_max_pref_val()
        #     target_val = max_pref_val
        #     while target_val >= min_pref_val:
        #         for student in self.students:
        #             for proj_id, pref_val in enumerate(student.projects_prefs):
        #                 if pref_val == target_val:
        #                     projects_waitlists[proj_id].append(student)
        #         target_val -= 1

        #     return projects_waitlists

        # def _min_max_pref_val(self):
        #     all_prefs = [
        #         pref_val
        #         for student in self.students
        #         for pref_val in student.projects_prefs
        #     ]
        #     return min(all_prefs), max(all_prefs)


        # print("\nThe unassigned students are:")
        # for student in self.unassigned:
        #     print(student.name, student.student_id)

        # print("\nThe students selected for departure are:", departing_students)

        # unassigned_remaining: list[Student] = []
        # for student in self.unassigned:
        #     if student not in departing_students:
        #         unassigned_remaining.append(student)
        # print("\nThe students unassigned students still available are:")
        # for student in unassigned_remaining:
        #     print(student.name, student.student_id)
        
        # print(
        #     student_to_move.name,
        #     student_to_move.student_id,
        #     "was chosen!",
        # )
        
        # print(
        #     "The departures after adding the chosen student are:",
        #     departures,
        # )